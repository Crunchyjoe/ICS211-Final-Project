{"version":3,"sources":["Amiibo.jsx","Amiibos.jsx","AmiiboForm.jsx","serviceWorker.js","index.js"],"names":["amiiboStyle","height","minHeight","width","backgroundColor","boxShadow","marginBottom","borderRadius","listStyle","marginLeft","Amiibo","props","react_default","a","createElement","style","character","gameSeries","amiiboSeries","name","src","image","alt","release","Amiibos","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","amiibos","showAmiiboForm","_this2","title","amiiboName","console","log","fetch","then","response","json","result","setState","series","src_AmiiboForm_0","showForm","id","align","margin","onClick","handleClick","bind","map","amiibo","src_Amiibo","na","Component","AmiiboForm","handleSubmit","assertThisInitialized","handleChangeName","handleChangeSeries","event","preventDefault","target","value","fieldStyle","textColor","position","padding","onSubmit","for","type","placeholder","onChange","src_Amiibos","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b161d17.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst amiiboStyle = {\r\n    height: 'auto',\r\n    minHeight: '100px',\r\n    width: '500px',\r\n    backgroundColor: '#75a3e7',\r\n    boxShadow: '0px 0px 5px #666',\r\n    marginBottom: '5px',\r\n    borderRadius: '5px'\r\n};\r\n\r\nconst listStyle = {\r\n    marginLeft: '20px'\r\n};\r\n\r\nconst Amiibo = (props) => {\r\n        return (<div style={amiiboStyle}><li style={listStyle}><h4>character: {props.character}</h4>\r\n            <ul>\r\n            <li>Game Series: {props.gameSeries}</li>\r\n            <li>Amiibo Series: {props.amiiboSeries}</li>\r\n            <li>Amiibo Name: {props.name}</li>\r\n            <li>Image:<br/><img src={props.image} alt = {props.character}></img></li>\r\n            <li>Release Date: {props.release}</li></ul></li></div>)\r\n\r\n    }\r\n\r\nexport default Amiibo;","import React, { Component } from 'react';\r\nimport AmiiboForm from './AmiiboForm';\r\nimport Amiibo from './Amiibo';\r\n{/*{import BrowserRouter as Router, Route, Link } from 'react-router-dom';*/}\r\n\r\nclass Amiibos extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {amiibos: [], showAmiiboForm: false};\r\n    }\r\n\r\n    /*here, replace the link with a variable depending on the type of amiibo you want to see */\r\n    componentDidMount() {\r\n        if (this.props.title != null){\r\n            var amiiboName = 'http://www.amiiboapi.com/api/amiibo/?name=' + this.props.title;\r\n            console.log(amiiboName);\r\n            fetch(amiiboName).then(response => response.json())\r\n            .then(result => this.setState({ amiibos: result[\"amiibo\"] }));\r\n        }\r\n        else if (this.props.series != null) {\r\n            var amiiboSeries = 'http://www.amiiboapi.com/api/amiibo/?gameseries=' + this.props.series;\r\n            console.log(amiiboName);\r\n            fetch(amiiboSeries).then(response => response.json())\r\n            .then(result => this.setState({ amiibos: result[\"amiibo\"] }));\r\n        }\r\n    }\r\n\r\n    handleClick() {\r\n        this.setState({showAmiiboForm: !this.state.showAmiiboForm});\r\n    }\r\n    render(){\r\n        const buttonStyle = {\r\n            borderRadius: '5px',\r\n            align: 'center',\r\n            backgroundColor: '#00c8af',\r\n            margin: 'auto',\r\n            width: 'auto'\r\n        }\r\n\r\n        if(!this.state.showAmiiboForm){\r\n            return(\r\n                <div id=\"showamiibos\">\r\n                    <button style={buttonStyle} onClick={this.handleClick.bind(this)}>Go back to search</button>\r\n                    {/*<Link to=\"/\">Back to search</Link>-->*/}\r\n                    <p>results for the search term: \"{this.props.title} {this.props.series}\"</p>\r\n                    <h3>information:</h3>\r\n                    <div>\r\n                        <ul>\r\n                            {this.state.amiibos.map( amiibo => <Amiibo \r\n                            amiiboSeries={amiibo.amiiboSeries}\r\n                            character={amiibo.character}\r\n                            gameSeries={amiibo.gameSeries}\r\n                            image={amiibo.image}\r\n                            name={amiibo.name}\r\n                            release={amiibo.release.na}/>)}\r\n                        </ul>\r\n                    </div>\r\n                            {/*<Route path=\"/\" exact component={AmiiboForm} render={(props) => <AmiiboForm {...props} showForm={true} />}/>*/}\r\n\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (<AmiiboForm showForm={false}/>);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Amiibos;","import React, { Component } from 'react';\r\nimport './AmiiboForm.css';\r\nimport Amiibos from './Amiibos';\r\n\r\nclass AmiiboForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {showForm : true};\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChangeName = this.handleChangeName.bind(this);\r\n        this.handleChangeSeries = this.handleChangeSeries.bind(this);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.setState({showForm: false});\r\n        return;\r\n    }\r\n\r\n    handleChangeName(event) {\r\n        this.setState({title: event.target.value});\r\n    }\r\n\r\n    handleChangeSeries(event) {\r\n        this.setState({series: event.target.value});\r\n    }\r\n    \r\n    render(){\r\n        const titleStyle = {\r\n            backgroundColor: '#00c8af',\r\n            fontSize: '25pt',\r\n            borderRadius: '15px 15px 0px 0px',\r\n            textAlign: 'center',\r\n            width: '500px',\r\n            position: 'absolute',\r\n            top: 0\r\n        }\r\n\r\n        const formStyle = {\r\n            backgroundColor: '#666666',\r\n            width: '500px',\r\n            borderRadius: '0px 15px 15px 0px',\r\n            position: 'relative',\r\n            padding: '10px'\r\n        }\r\n\r\n        const fieldStyle = {\r\n            backgroundColor: '#85bfc6',\r\n            textColor: 'black'\r\n        }\r\n\r\n        const buttonStyle = {\r\n            borderRadius: '5px',\r\n            align: 'center',\r\n            backgroundColor: '#00c8af',\r\n            margin: 'auto',\r\n            width: '20%'\r\n        }\r\n\r\n        if (this.state.showForm) {\r\n            return(\r\n                <div>\r\n                <form style={formStyle} onSubmit={this.handleSubmit}>\r\n                    <label for=\"searchname\">Search for Amiibo by name:</label>\r\n                    <input style={fieldStyle} id=\"searchname\" type=\"text\" placeholder=\"eg; mario...\" value={this.state.title} onChange={this.handleChangeName}/>\r\n                    <br></br>\r\n                    <label for=\"searchseries\">Search for Amiibo by game series:</label>\r\n                    <input style={fieldStyle} id=\"searchseries\" type=\"text\" placeholder=\"eg; super mario bros...\" value={this.state.series} onChange={this.handleChangeSeries}/>\r\n                    <br></br>\r\n                    <button style={buttonStyle} type=\"submit\">GO</button>\r\n                </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            return <Amiibos title={this.state.title} series={this.state.series}/>\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default AmiiboForm;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AmiiboForm from './AmiiboForm';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AmiiboForm />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}